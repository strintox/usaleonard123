import logging
import requests
import base64
import io
import asyncio
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ApplicationBuilder
)
from telegram.constants import ParseMode, ChatAction

TELEGRAM_BOT_TOKEN = "7639285272:AAH-vhuRyoVDMNjqyvkDgfsZw7_d5GEc77Q" # <<< –í–ê–® –û–ü–£–ë–õ–ò–ö–û–í–ê–ù–ù–´–ô TELEGRAM TOKEN
LANGDOCK_API_KEY = "sk-OP8Ybcki6KOxtIcWZCFmrdNGizFUSiMLIu7sncfB0Pzqi1mfSFVhlz1x-GwBRZ1aPCWwglAY2V5bjNsA4c_Zfw" # <<< –í–ê–® –û–ü–£–ë–õ–ò–ö–û–í–ê–ù–ù–´–ô LANGDOCK KEY

LANGDOCK_API_URL = "https://api.langdock.com/anthropic/eu/v1/messages"
CLAUDE_MODEL = "claude-3-7-sonnet-20250219"
MAX_MESSAGE_LENGTH = 4096
API_TIMEOUT = 180 


logging.basicConfig(
    format="[%(asctime)s] %(levelname)s: %(message)s",
    level=logging.INFO,
    datefmt="%H:%M:%S"
)
logging.getLogger("httpx").setLevel(logging.WARNING)
logger = logging.getLogger("–¢–µ–ª–µ–≥—Ä–∞–º–ë–æ—Ç")


async def send_long_message(update: Update, text: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Å—Ç—è–º–∏."""
    if not text: return
    for i in range(0, len(text), MAX_MESSAGE_LENGTH):
        chunk = text[i:i + MAX_MESSAGE_LENGTH]
        try:
            await update.message.reply_text(chunk, parse_mode=ParseMode.HTML)
            if len(text) > MAX_MESSAGE_LENGTH: await asyncio.sleep(0.5)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            try:
                error_msg = (
                    "<b>‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–∞—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞</b>\n\n"
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç. –í–æ–∑–º–æ–∂–Ω–æ, –≤ —Ç–µ–∫—Å—Ç–µ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ."
                )
                await update.message.reply_html(error_msg)
            except Exception as inner_e:
                logger.error(f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {inner_e}")
            break

async def call_claude_api(user_id: int, context: ContextTypes.DEFAULT_TYPE, new_user_content: list | str) -> str | None:
    """–í—ã–∑—ã–≤–∞–µ—Ç API Claude, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ."""
    if 'history' not in context.user_data: context.user_data['history'] = []
    history = context.user_data['history']
    history.append({"role": "user", "content": new_user_content})

    max_history_messages = 10
    if len(history) > max_history_messages:
        history = history[-max_history_messages:]
        context.user_data['history'] = history

    headers = {"Authorization": f"Bearer {LANGDOCK_API_KEY}", "Content-Type": "application/json"}
    payload = {"model": CLAUDE_MODEL, "messages": history, "max_tokens": 4000}
    logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}. –ò—Å—Ç–æ—Ä–∏—è: {len(history)} —Å–æ–æ–±—â–µ–Ω–∏–π")

    try:
        response = requests.post(LANGDOCK_API_URL, headers=headers, json=payload, timeout=API_TIMEOUT)
        response.raise_for_status()
        response_data = response.json()

        if response_data.get("content") and isinstance(response_data["content"], list) and len(response_data["content"]) > 0:
            assistant_response_block = response_data["content"][0]
            if assistant_response_block.get("type") == "text":
                assistant_text = assistant_response_block.get("text", "").strip()
                if assistant_text:
                    history.append({"role": "assistant", "content": assistant_text})
                    context.user_data['history'] = history
                    logger.info(f"–ü–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}. –î–ª–∏–Ω–∞: {len(assistant_text)} —Å–∏–º–≤–æ–ª–æ–≤")
                    return assistant_text
                else:
                    logger.error(f"API –≤–µ—Ä–Ω—É–ª–æ –ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –±–ª–æ–∫: {response_data}")
                    return "<b>‚ö†Ô∏è –û—à–∏–±–∫–∞:</b> –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å."
            else:
                 logger.error(f"API –≤–µ—Ä–Ω—É–ª–æ –Ω–µ—Ç–µ–∫—Å—Ç–æ–≤—ã–π –±–ª–æ–∫: {response_data}")
                 return "<b>‚ö†Ô∏è –û—à–∏–±–∫–∞:</b> –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –≤ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ."
        else:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ API: {response_data}")
            stop_reason = response_data.get("stop_reason")
            if stop_reason == "max_tokens":
                 return "<b>‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ:</b> –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–∏–ª—Å—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–º –∏ –±—ã–ª –æ–±—Ä–µ–∑–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /clear."
            return f"<b>‚ö†Ô∏è –û—à–∏–±–∫–∞:</b> –ü—Ä–æ–±–ª–µ–º–∞ —Å –æ—Ç–≤–µ—Ç–æ–º –Ω–µ–π—Ä–æ—Å–µ—Ç–∏. (–ü—Ä–∏—á–∏–Ω–∞: {stop_reason or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'})"

    except requests.exceptions.Timeout:
        logger.error(f"–¢–∞–π–º–∞—É—Ç API ({API_TIMEOUT} —Å–µ–∫) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return f"<b>‚è≥ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è</b>\n\n–ù–µ–π—Ä–æ—Å–µ—Ç—å –æ—Ç–≤–µ—á–∞–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ (–±–æ–ª–µ–µ {API_TIMEOUT} —Å–µ–∫). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–π –≤–æ–ø—Ä–æ—Å."
    except requests.exceptions.HTTPError as e:
        logger.error(f"–û—à–∏–±–∫–∞ HTTP {e.response.status_code}: {e.response.text}")
        error_details = e.response.text
        try: error_json = e.response.json(); error_details = error_json.get('error', {}).get('message', error_details) or error_json.get('detail', error_details)
        except ValueError: pass
        
        # –ü–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if e.response.status_code == 401:
            return "<b>‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</b>\n\n–ü—Ä–æ–±–ª–µ–º–∞ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ API –Ω–µ–π—Ä–æ—Å–µ—Ç–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        elif e.response.status_code == 429:
            return "<b>‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤</b>\n\n–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        elif e.response.status_code >= 500:
            return "<b>üõ†Ô∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã</b>\n\n–°–µ—Ä–≤–∏—Å –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        else:
            return f"<b>‚ùå –û—à–∏–±–∫–∞ {e.response.status_code}</b>\n\n–ü—Ä–æ–∏–∑–æ—à–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞."
            
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {e}")
        return "<b>üîå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</b>\n\n–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É."
    except Exception as e:
        logger.exception(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ API –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return f"<b>üí• –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞</b>\n\n–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Telegram ---

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º."""
    user = update.effective_user
    context.user_data['history'] = [] # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({user.username or '–±–µ–∑ –∏–º–µ–Ω–∏'}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å HTML-—Ä–∞–∑–º–µ—Ç–∫–æ–π
    welcome_message = (
        f"<b>üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}! üåü</b>\n\n"
        f"–Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–∞ –±–∞–∑–µ <b>Claude 3.7 Sonnet</b>. –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –ª—é–±—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏!\n\n"
        f"<b>üìã –ú–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
        f"  ‚Ä¢ üí¨ –û—Ç–≤–µ—á—É –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã\n"
        f"  ‚Ä¢ üñºÔ∏è –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n"
        f"  ‚Ä¢ üìö –ü–æ–º–æ–≥—É —Å –ø–æ–∏—Å–∫–æ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏\n"
        f"  ‚Ä¢ üíæ –ó–∞–ø–æ–º–Ω—é –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–∞—à–µ–π –±–µ—Å–µ–¥—ã\n\n"
        f"<b>‚öôÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        f"  ‚Ä¢ /start - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
        f"  ‚Ä¢ /clear - –æ—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞\n\n"
        f"<b>üëá –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ</b>"
    )

    await update.message.reply_html(welcome_message)
    logger.info(f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}")

async def clear_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /clear."""
    user_id = update.effective_user.id
    context.user_data['history'] = []
    logger.info(f"–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    clear_message = (
        "<b>üßπ –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞!</b>\n\n"
        "–í—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–±—ã—Ç—ã. –ú–æ–∂–µ–º –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ."
    )
    
    await update.message.reply_html(clear_message)

async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    user_id = update.effective_user.id
    user_text = update.message.text
    if not user_text: return

    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}. –î–ª–∏–Ω–∞: {len(user_text)} —Å–∏–º–≤–æ–ª–æ–≤")
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "–ø–µ—á–∞—Ç–∞–µ—Ç..." –¥–ª—è –ª—É—á—à–µ–≥–æ UX
    await context.bot.send_chat_action(chat_id=update.effective_chat.id, action=ChatAction.TYPING)

    response_text = await call_claude_api(user_id, context, user_text)
    if response_text: 
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}. –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {len(response_text)} —Å–∏–º–≤–æ–ª–æ–≤")
        await send_long_message(update, response_text)

async def handle_photo_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ñ–æ—Ç–æ."""
    user_id = update.effective_user.id
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "–∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ..." (–∏–ª–∏ "–ø–µ—á–∞—Ç–∞–µ—Ç...")
    await context.bot.send_chat_action(chat_id=update.effective_chat.id, action=ChatAction.UPLOAD_PHOTO)

    try:
        photo_file = await update.message.photo[-1].get_file()
        with io.BytesIO() as buf:
            await photo_file.download_to_memory(buf)
            buf.seek(0)
            image_bytes = buf.read()
            base64_image = base64.b64encode(image_bytes).decode('utf-8')

        media_type = "image/jpeg" # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if photo_file.file_path:
            ext = photo_file.file_path.split('.')[-1].lower()
            if ext == 'png': media_type = "image/png"
            elif ext == 'gif': media_type = "image/gif"
            elif ext == 'webp': media_type = "image/webp"
        logger.info(f"–¢–∏–ø –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {media_type}")

        caption = update.message.caption if update.message.caption else "–û–ø–∏—à–∏ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ."
        logger.info(f"–ü–æ–¥–ø–∏—Å—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é: '{caption}'")

        user_content = [
            {"type": "image", "source": {"type": "base64", "media_type": media_type, "data": base64_image}},
            {"type": "text", "text": caption}
        ]
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "–ø–µ—á–∞—Ç–∞–µ—Ç..." –ø–µ—Ä–µ–¥ –¥–æ–ª–≥–∏–º –∑–∞–ø—Ä–æ—Å–æ–º –∫ API
        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action=ChatAction.TYPING)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        processing_msg = await update.message.reply_html("<i>üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...</i>")
        
        response_text = await call_claude_api(user_id, context, user_content)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–±—Ä–∞–±–æ—Ç–∫–µ
        await processing_msg.delete()
        
        if response_text: 
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            await send_long_message(update, response_text)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}", exc_info=True)
        error_msg = (
            "<b>‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</b>\n\n"
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –≤ –¥—Ä—É–≥–æ–º —Ñ–æ—Ä–º–∞—Ç–µ."
        )
        await update.message.reply_html(error_msg)

# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ ---

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    print("\n" + "‚òÖ" * 60)
    print("‚òÖ    –ó–∞–ø—É—Å–∫ –¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞ –Ω–∞ –±–∞–∑–µ Claude 3.7 Sonnet    ‚òÖ")
    print("‚òÖ" * 60 + "\n")
    
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    
    try:
        # –Ø–≤–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º JobQueue –¥–ª—è –æ–±—Ö–æ–¥–∞ –æ—à–∏–±–∫–∏ 'weak reference'
        builder = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).job_queue(None)
        logger.info("–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        application = builder.build()

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        application.add_handler(CommandHandler("start", start_command))
        application.add_handler(CommandHandler("clear", clear_command))
        application.add_handler(MessageHandler(filters.PHOTO & (~filters.COMMAND), handle_photo_message))
        application.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_text_message))

        print("‚îå" + "‚îÄ" * 50 + "‚îê")
        print("‚îÇ" + " " * 15 + "–°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´" + " " * 16 + "‚îÇ")
        print("‚îú" + "‚îÄ" * 50 + "‚î§")
        print("‚îÇ ‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω                  ‚îÇ")
        print("‚îÇ ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã          ‚îÇ")
        print("‚îÇ ‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∞–∫—Ç–∏–≤–Ω–∞                ‚îÇ")
        print("‚îÇ ‚öôÔ∏è  –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ –æ–ø—Ä–æ—Å–∞...              ‚îÇ")
        print("‚îî" + "‚îÄ" * 50 + "‚îò\n")
        
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ –æ–ø—Ä–æ—Å–∞")
        application.run_polling(allowed_updates=Update.ALL_TYPES)

    except Exception as e:
        print("\n" + "‚ö†Ô∏è " * 10)
        print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ü–†–ò –ó–ê–ü–£–°–ö–ï –ë–û–¢–ê:")
        print(f"‚ùå {e}")
        print("‚ö†Ô∏è " * 10 + "\n")
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)

if __name__ == "__main__":
    main()
